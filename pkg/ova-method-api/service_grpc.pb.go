// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_method_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvaMethodApiClient is the client API for OvaMethodApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvaMethodApiClient interface {
	Create(ctx context.Context, in *CreateMethodRequest, opts ...grpc.CallOption) (*MethodItem, error)
	Remove(ctx context.Context, in *MethodIdRequest, opts ...grpc.CallOption) (*Status, error)
	Describe(ctx context.Context, in *MethodIdRequest, opts ...grpc.CallOption) (*MethodInfo, error)
	List(ctx context.Context, in *MethodListRequest, opts ...grpc.CallOption) (*MethodList, error)
}

type ovaMethodApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOvaMethodApiClient(cc grpc.ClientConnInterface) OvaMethodApiClient {
	return &ovaMethodApiClient{cc}
}

func (c *ovaMethodApiClient) Create(ctx context.Context, in *CreateMethodRequest, opts ...grpc.CallOption) (*MethodItem, error) {
	out := new(MethodItem)
	err := c.cc.Invoke(ctx, "/ova.method.api.OvaMethodApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaMethodApiClient) Remove(ctx context.Context, in *MethodIdRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ova.method.api.OvaMethodApi/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaMethodApiClient) Describe(ctx context.Context, in *MethodIdRequest, opts ...grpc.CallOption) (*MethodInfo, error) {
	out := new(MethodInfo)
	err := c.cc.Invoke(ctx, "/ova.method.api.OvaMethodApi/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaMethodApiClient) List(ctx context.Context, in *MethodListRequest, opts ...grpc.CallOption) (*MethodList, error) {
	out := new(MethodList)
	err := c.cc.Invoke(ctx, "/ova.method.api.OvaMethodApi/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvaMethodApiServer is the server API for OvaMethodApi service.
// All implementations must embed UnimplementedOvaMethodApiServer
// for forward compatibility
type OvaMethodApiServer interface {
	Create(context.Context, *CreateMethodRequest) (*MethodItem, error)
	Remove(context.Context, *MethodIdRequest) (*Status, error)
	Describe(context.Context, *MethodIdRequest) (*MethodInfo, error)
	List(context.Context, *MethodListRequest) (*MethodList, error)
	mustEmbedUnimplementedOvaMethodApiServer()
}

// UnimplementedOvaMethodApiServer must be embedded to have forward compatible implementations.
type UnimplementedOvaMethodApiServer struct {
}

func (UnimplementedOvaMethodApiServer) Create(context.Context, *CreateMethodRequest) (*MethodItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOvaMethodApiServer) Remove(context.Context, *MethodIdRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedOvaMethodApiServer) Describe(context.Context, *MethodIdRequest) (*MethodInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedOvaMethodApiServer) List(context.Context, *MethodListRequest) (*MethodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOvaMethodApiServer) mustEmbedUnimplementedOvaMethodApiServer() {}

// UnsafeOvaMethodApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvaMethodApiServer will
// result in compilation errors.
type UnsafeOvaMethodApiServer interface {
	mustEmbedUnimplementedOvaMethodApiServer()
}

func RegisterOvaMethodApiServer(s grpc.ServiceRegistrar, srv OvaMethodApiServer) {
	s.RegisterService(&OvaMethodApi_ServiceDesc, srv)
}

func _OvaMethodApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaMethodApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.method.api.OvaMethodApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaMethodApiServer).Create(ctx, req.(*CreateMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaMethodApi_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaMethodApiServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.method.api.OvaMethodApi/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaMethodApiServer).Remove(ctx, req.(*MethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaMethodApi_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaMethodApiServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.method.api.OvaMethodApi/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaMethodApiServer).Describe(ctx, req.(*MethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaMethodApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaMethodApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.method.api.OvaMethodApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaMethodApiServer).List(ctx, req.(*MethodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OvaMethodApi_ServiceDesc is the grpc.ServiceDesc for OvaMethodApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OvaMethodApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.method.api.OvaMethodApi",
	HandlerType: (*OvaMethodApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OvaMethodApi_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _OvaMethodApi_Remove_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _OvaMethodApi_Describe_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OvaMethodApi_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-method-api/service.proto",
}
